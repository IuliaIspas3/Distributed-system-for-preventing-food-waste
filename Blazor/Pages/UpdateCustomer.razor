@page "/UpdateCustomer"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject ICustomerService CustomerService
<h3>UpdateCustomer</h3>
<div class="card">
    <div class="form-group field">
        <label>Account Id:</label>
        <input type="text" @bind="AccountId" @bind:event="oninput"/>
        <label>Email:</label>
        <input type="text" @bind="Email" @bind:event="oninput"/>
        <label>Password:</label>
        <input type="text" @bind="Password" @bind:event="oninput"/>
        <label>Phone number:</label>
        <input type="text" @bind="PhoneNumber" @bind:event="oninput"/>

        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <label style="color: red">@ErrorMsg</label>
        }
    </div>
    <div class="button-row">
        <button @onclick="Update" class="acceptbtn">Update Info</button>
    </div>
</div>

@code {
    private int AccountId; /// auth
    private string Email = "";
    private string Password = "";
    private string PhoneNumber = "";
    private string ErrorMsg = "";

    private async void Update()
    {
        try
        {
            if (string.IsNullOrEmpty(Email) && string.IsNullOrEmpty(Password) && string.IsNullOrEmpty(PhoneNumber))
                ErrorMsg = "No information provided.";
            else
            {
                await CustomerService.UpdateAsync(new CustomerUpdateDTO(AccountId,  Email, Password, PhoneNumber));
                AccountId = 0;
                Email = "";
                Password = "";
                PhoneNumber = "";
                ErrorMsg = "Update proceeded.";
            }
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
    }
}