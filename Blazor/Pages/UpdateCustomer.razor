@page "/UpdateCustomer"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject ICustomerService CustomerService
<h3>UpdateCustomer</h3>
<div class="card">
    <div class="form-group field">
        <label>Account Id:</label>
        <input type="text" @bind="dto.AccountId" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Email:</label>
        <input type="text" @bind="dto.Email" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Password:</label>
        <input type="text" @bind="dto.Password" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Phone number:</label>
        <input type="text" @bind="dto.PhoneNumber" @bind:event="oninput"/>
    </div>
    <div class="button-row">
        <button @onclick="Update" class="acceptbtn">Update Info</button>
    </div>
    <div class="button-row">
        <button @onclick="Delete" class="acceptbtn">Delete Account</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <label style="color: red">@Message</label>
}

@code {
    private CustomerUpdateDTO dto = null!;
    private int AccountId = 0; /// auth
    private string Email = "";
    private string Password = "";
    private string PhoneNumber = "";
    private string Message = "";

    protected override void OnInitialized()
    {
        dto = new CustomerUpdateDTO(AccountId, Email, Password, PhoneNumber);
    }
    
    private async void Update()
    {
        try
        {
            Message = "";
            if (string.IsNullOrEmpty(dto.Email) && string.IsNullOrEmpty(dto.Password) && string.IsNullOrEmpty(dto.PhoneNumber))
                Message = "No information provided.";
            else
            {
                await CustomerService.UpdateAsync(dto);
                AccountId = 0;
                Email = "";
                Password = "";
                PhoneNumber = "";
                Message = "Update proceeded.";
            }
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    private async void Delete()
    {
        try
        {
            Message = "";
            await CustomerService.DeleteAsync(dto.AccountId);
            Message = "Delete proceeded.";
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }
}