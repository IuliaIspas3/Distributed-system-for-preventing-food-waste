@page "/ManageAccount"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject ICustomerService CustomerService
@inject IFoodSellerService FoodSellerService
@inject IAuthService AuthService
@inject NavigationManager NavMgr
@attribute [Authorize]


<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Food Seller</a>
            <a>Manage &#x2022 Account</a>
        </div>
        <div class="content-central">
            <div class="border-box col-12 col-md-6">
                <div class="manage-account col-12">
                    <AuthorizeView Policy="MustBeFoodSeller">
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Name" type="text" @bind="foodSellerDto.Name" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Street" type="text" @bind="foodSellerDto.Street" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Number" type="number" @bind="foodSellerDto.Number" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="City" type="text" @bind="foodSellerDto.City" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Email" type="email" @bind="foodSellerDto.Email" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Phone Number" type="text" @bind="foodSellerDto.PhoneNumber" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Password" type="password" @bind="foodSellerDto.Password" @bind:event="oninput"/>
                        </div>
                    </AuthorizeView>
                    <AuthorizeView Policy="MustBeCustomer">
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Email" type="email" @bind="customerDto.Email" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Phone Number" type="text" @bind="customerDto.PhoneNumber" @bind:event="oninput"/>
                        </div>
                        <div class="col-12 col-md-8">
                            <input class="manage-field" placeholder="Password" type="password" @bind="customerDto.Password" @bind:event="oninput"/>
                        </div>
                    </AuthorizeView>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <label class="manage-field" style="color: red">@ErrorMessage</label>
                    }
                    <div class="button-row col-12 col-md-8">
                        <div class="col-6">
                            <button @onclick="ConfirmUpdateAction" class="button">Update Account</button>
                        </div>
                        <div class="col-6">
                            <button @onclick="ConfirmDeleteAction" class="button">Delete Account</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Banegårdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>
<Modal ShowModal="_showUpdateModal">
    <p>Are you sure you want to edit your account information?</p>
    <button @onclick="@ProceedUpdate">Yes</button>
    <button @onclick="@CancelOrEndAction">No, cancel</button>
</Modal>
<Modal ShowModal="_showConfirmationModal">
    <p>@_message</p>
    <button @onclick="@CancelOrEndAction">OK</button>
</Modal>
<Modal ShowModal="_showDeleteModal">
    <p>Are you sure you want to delete your account?</p>
    <button @onclick="@ProceedDelete">Yes</button>
    <button @onclick="@CancelOrEndAction">No, cancel</button>
</Modal>

@code {
    private CustomerUpdateDTO customerDto = null!;
    private FoodSellerUpdateDTO foodSellerDto = null!;
    private int AccountId;
    private string Email = "";
    private string Password = "";
    private string PhoneNumber = "";
    private string Name = "";
    private string Street = "";
    private int Number = 0;
    private string City = "";
    private string ErrorMessage = "";
    private bool _showUpdateModal;
    private bool _showConfirmationModal;
    private bool _showDeleteModal;
    private String _message = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        customerDto = new CustomerUpdateDTO(AccountId, Email, Password, PhoneNumber);
        foodSellerDto = new FoodSellerUpdateDTO(AccountId, Name, Street, Number, City, Email, Password, PhoneNumber);
    }

    private async void Update()
    {
        Claim isCustomer = userClaims.FirstOrDefault(c => c.Type.Equals("MustBeCustomer"));
        if (isCustomer is not null)
        {
            try
            {
                ErrorMessage = "";
                if (string.IsNullOrEmpty(customerDto.Email) && string.IsNullOrEmpty(customerDto.Password) && string.IsNullOrEmpty(customerDto.PhoneNumber)) 
                    ErrorMessage = "No information provided.";
                else
                {
                    await CustomerService.UpdateAsync(customerDto);
                    Email = "";
                    Password = "";
                    PhoneNumber = "";
                    _message = "You have successfully changed your account details";
                    _showConfirmationModal = true;
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                ErrorMessage = e.Message;
                StateHasChanged();
            }
        }
        else
        {
            try
            {
                ErrorMessage = "";
                if (string.IsNullOrEmpty(foodSellerDto.Email) && string.IsNullOrEmpty(foodSellerDto.Password) && string.IsNullOrEmpty(foodSellerDto.PhoneNumber) && string.IsNullOrEmpty(foodSellerDto.Name) && ((string.IsNullOrEmpty(foodSellerDto.Street) || Number <= 0 || string.IsNullOrEmpty(foodSellerDto.City))))
                    ErrorMessage = "No information provided.";
                else
                {
                    await FoodSellerService.UpdateAsync(foodSellerDto);
                    Email = "";
                    Password = "";
                    PhoneNumber = "";
                    Name = "";
                    Street = "";
                    Number = 0;
                    City = "";
                    _message = "You have successfully changed your account details";
                    _showConfirmationModal = true;
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                ErrorMessage = e.Message;
                StateHasChanged();
            }
        }
        
    }

    private async void Delete()
    {
        Claim isCustomer = userClaims.FirstOrDefault(c => c.Type.Equals("MustBeCustomer"));
        if (isCustomer is not null)
        {
            try
            {
                ErrorMessage = "";
                _message = "You have successfully deleted your account.";
                _showConfirmationModal = true;
                StateHasChanged();
                await CustomerService.DeleteAsync(AccountId);
                Thread.Sleep(4000);
                await AuthService.LogoutAsync();
            }
            catch (Exception e)
            {
                ErrorMessage = e.ToString();
                StateHasChanged();
            }
        }
        else
        {
            try
            {
                ErrorMessage = "";
                _message = "You have successfully deleted your account.";
                _showConfirmationModal = true;
                StateHasChanged();
                await FoodSellerService.DeleteAsync(AccountId);
                await AuthService.LogoutAsync();
                NavMgr.NavigateTo("/");
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                ErrorMessage = $"Error: {e.Message}";
                StateHasChanged();
            }
        }
    }

    private void ConfirmUpdateAction()
    {
        _showUpdateModal = true;
        StateHasChanged();
    }

    private void ConfirmDeleteAction()
    {
        _showDeleteModal = true;
        StateHasChanged();
    }
    private void ProceedUpdate()
    {
        _showUpdateModal = false;
        StateHasChanged();
        Update();
    }

    private void ProceedDelete()
    {
        _showDeleteModal = false;
        StateHasChanged();  
        Delete();
    }
    private void CancelOrEndAction()
    {
        _showUpdateModal = false;
        _showConfirmationModal = false;
        _showDeleteModal = false;
        StateHasChanged();
    }
}