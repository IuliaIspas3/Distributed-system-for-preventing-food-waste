@page "/FoodSellerDisplayFoodOffer/{id:int}"
@using System.Security.Claims
@using Domain
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager Navmgr
@inject IFoodOfferService foodOfferService
@attribute [Authorize]

<AuthorizeView Policy="MustBeFoodSeller">
    <div class="main-content">
        <div class="sidebar">
            <NavMenu/>
        </div>
        <div class="content">
            <div class="content-header">
                <a>Food Seller</a>
                <a>Food &#x2022 Offer &#x2022 Details</a>
            </div>
            <div class="content-central">
                @if (foodOffer is not null)
                {
                    <div class="food-offer">
                        <div class="product-image col-sm-12 col-lg-3"></div>
                        <div class="product-info col-sm-12 col-lg-9">
                            <div style="margin-bottom: 3px">Title:</div>
                            <input  type="text" @bind="Title" @bind:event="oninput"/>
                            <div style="margin-bottom: 3px">Description:</div>
                            <textarea type="text" @bind="Description" @bind:event="oninput"/>
                            <div>
                                <label style="margin-bottom: 3px">Price:</label>
                                <input style="width: 50px" type="number" @bind="Price" @bind:event="oninput"/>
                                <label style="margin-left: 28%"> Pick-up Interval: </label>
                                <RadzenDatePicker @bind-Value=@StartPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm"/> - 
                                <RadzenDatePicker @bind-Value=@EndPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm"/>
                               
                            </div>
                            @if (foodOffer.IsCompleted || foodOffer.IsReserved)
                            {
                                <label>This food offer is completed or reserved, therefore you cannot perform any actions.</label>
                                <div>
                                    <button @onclick="UpdateAsync" class="btn" disabled>Edit Food Offer</button>
                                    <button @onclick="DeleteAsync" class="btn" disabled>Delete Food Offer</button>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <button @onclick="UpdateAsync" class="btn">Edit Food Offer</button>
                                    <button @onclick="DeleteAsync" class="btn">Delete Food Offer</button>
                                </div>
                                    
                            }
                               
                        </div>
                        <label>@ErrorMessage</label>
                    </div>
                }
            </div>
            
            <div class="content-footer bottom-0">
                <div class="footer-title">Too Fresh Too Waste</div>
                <div class="footer-address">
                    <a>Banegårdsgade 2</a>
                    <a>8700 Horsens</a>
                    <a>+45 50 36 14 56</a>
                </div>
                <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
            </div>
        </div>
    </div>
</AuthorizeView>
@code {
    private int AccountId;
    private string ErrorMessage = "";
    private string Title = "";
    private string Description = "";
    private double Price = 0.0;
    private DateTime StartPickupTime = DateTime.Now;
    private DateTime EndPickupTime = DateTime.Now;
    [Parameter] 
    public int id { get; set; }

    private FoodOffer foodOffer { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        foodOffer = await foodOfferService.GetFoodOfferAsync(AccountId, id);
        Console.WriteLine(foodOffer.Title);
        Title = foodOffer.Title;
        Description = foodOffer.Description;
        Price = foodOffer.Price;
        MyDate date = foodOffer.StartPickupTime;
        StartPickupTime = new DateTime(date.year, date.month, date.day, date.hour, date.minute, 0, 0);
        date = foodOffer.EndPickupTime;
        EndPickupTime = new DateTime(date.year, date.month, date.day, date.hour, date.minute, 0, 0);
        
    }

    private async void UpdateAsync()
    {
        try
        {
            ErrorMessage = "";
            if (string.IsNullOrEmpty(Title) || string.IsNullOrEmpty(Description) || Price <= 0 || EndPickupTime.CompareTo(StartPickupTime) <= 0)
            {
                ErrorMessage = "Some information is incorrect.";
            }
            else
            {
                FoodSeller foodSeller = new FoodSeller(0, "", "", "", "");
                foodOffer = new FoodOffer(id, foodSeller, Title, Description, Price, new MyDate(StartPickupTime.Year, StartPickupTime.Month, StartPickupTime.Day, StartPickupTime.Hour, StartPickupTime.Minute), new MyDate(EndPickupTime.Year, EndPickupTime.Month, EndPickupTime.Day, EndPickupTime.Hour, EndPickupTime.Minute), foodOffer.IsReserved, foodOffer.IsCompleted);
                Console.WriteLine(foodOffer.ToString());
                await foodOfferService.UpdateAsync(foodOffer);
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }

    private async void DeleteAsync()
    {
        try
        {
            ErrorMessage = "";
            await foodOfferService.DeleteAsync(id);
            Navmgr.NavigateTo("/ManageFoodOffers");

        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }
    
}
}