@page "/ManageFoodOffers"
@using Domain
@using Domain.DTOs
@using System.Security.Claims
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavMgr
@inject IFoodOfferService FoodOfferService
@attribute [Authorize]
<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Food Seller</a>
            <a>&#x2022 Your Food Offers &#x2022</a>
        </div>
        <div class="content-central">
            <AuthorizeView Policy="MustBeFoodSeller">
                <div class="subtitle"><h3>&#x2022 Create a new food offer &#x2022</h3></div>
                <div class="foodOffer-container">
                    <div class="card">
                        <div class="form-group field">
                            <label class="title-field">Title:</label>
                            <input class="input-field"  id="title" type="text" @bind="Title" @bind:event="oninput"/>
                        </div>
                        <div class="form-group field">
                            <label class="title-field">Description:</label>
                            <textarea class="input-field-description" id="description" type="text" @bind="Description" @bind:event="oninput"></textarea>
                        </div>
                        <div class="form-group field">
                            <label class="title-field" id>Price:</label>
                            <input class="input-field" id="price" type="number" @bind="Price" @bind:event="oninput"/>
                        </div>
                        <div class="form-group field">
                            <label class="title-field">Start pick-up date:</label>
                            <RadzenDatePicker id="date" @bind-Value=@StartPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm"/>
                        </div>
                        <div class="form-group field">
                            <label class="title-field" id="endDate">End pick-up date:    </label>
                            <RadzenDatePicker id="date" @bind-Value=@EndPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm"/>
                        </div>
                        <div class="image-upload">
                            <h4 class="upload-item">Upload Image</h4>
                            <InputFile class="upload-item upload-input" accept="image/*" OnChange="@(args => HandleFileChange(args))"/>
                        </div>
                        <div class="button-row">
                            <button @onclick="CreateAsync" class="createbtn">Create</button>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <label style="color: red">@ErrorMessage</label>
                    }
                </div>
                
                @if (_foodOffers == null)
                {
                }
                else if (!_foodOffers.Any())
                {
                    <p>No food offers to display</p>
                }
                else
                {
                    <div class="foodOffer-container">
                        @foreach (var item in _foodOffers)
                        {
                            <div class="product col-6 col-lg-4" @onclick="@(() => NavMgr.NavigateTo($"/FoodSellerDisplayFoodOffer/{item.Id}"))">
                                <img class="product-image" src="@($"data:image/png;base64,{@item.Photo}")" alt="Uploaded Image"/>
                                <div class="product-title"><b>@item.Title</b></div>
                                <div class="product-price">@item.Price DKK</div>
                                <div class="product-start">Start pick-up time: @item.StartPickupTime.ToString()</div>
                                <div class="product-end">End pick-up time: @item.EndPickupTime.ToString()</div>
                            </div>
                        }
                    </div>
                    
                }

            </AuthorizeView>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Baneg√•rdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>
<Modal ShowModal="_showModal">
    <p>You have successfully added a food offer!</p>
    <button @onclick="@Proceed">OK</button>
</Modal>

@code {
    private int AccountId;
    private List<FoodOffer> _foodOffers;
    private string ErrorMessage = "";
    private string Title = "";
    private string Description = "";
    private double Price;
    private DateTime StartPickupTime = DateTime.Now;
    private DateTime EndPickupTime = DateTime.Now;
    private bool _showModal;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;
    private string base64String = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        _foodOffers = await FoodOfferService.GetFoodOffersByFoodSellerIdAsync(AccountId);
    }

    private async Task CreateAsync()
    {
        ErrorMessage = "";
        try
        {
            await FoodOfferService.CreateAsync(new FoodOfferCreationDTO(AccountId, Title, Description, Price, new MyDate(StartPickupTime.Year, StartPickupTime.Month, StartPickupTime.Day, StartPickupTime.Hour, StartPickupTime.Minute), new MyDate(EndPickupTime.Year, EndPickupTime.Month, EndPickupTime.Day, EndPickupTime.Hour, EndPickupTime.Minute), base64String));
            _foodOffers = await FoodOfferService.GetFoodOffersByFoodSellerIdAsync(AccountId);
            _showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }
    private void Proceed()
    {
        _showModal = false;
        StateHasChanged();
    }
    
    async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using (var stream = file.OpenReadStream())
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                base64String = Convert.ToBase64String(memoryStream.ToArray());
            }
        }
    }
}