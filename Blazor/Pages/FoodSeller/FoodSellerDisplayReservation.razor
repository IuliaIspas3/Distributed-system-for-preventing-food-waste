@page "/FoodSellerDisplayReservation/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims;
@inject IReservationService ReservationService;
@inject NavigationManager Navmgr
@attribute [Authorize]
<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Food Seller</a>
            <a>Display &#x2022 Reservation</a>
        </div>
        <div class="content-central">
         @if (reservation is not null)
         {
             <div class="food-offer">
                 <div class="product-image"></div>
                 <div class = "product-info">
                     <div class="product-title">@reservation.Title</div>
                     <div><span class="oi oi-clock"/>  @reservation.StartPickUpTime.ToString() - @reservation.EndPickUpTime.ToString()</div>
                     <div class = "product-price">@reservation.Price DKK</div>
                     <div style="display: flex">
                         <label style="font-weight: bold">Reserved by :  </label>
                         <div>  @reservation.CustomerFirstName @reservation.CustomerLastName </div>  
                     </div>
                     <div style="display: flex">
                         <label style="font-weight: bold">Reservation number : </label>
                         <div>  @reservation.ReservationNumber</div>  
                     </div>
                     <div style="font-weight: bold">What is in the package?</div>
                     <div >@reservation.Description</div>
                 
                     @if (reservation.IsCompleted)
                     {
                         <div style="font-weight: bold">This reservation is already completed, therefore you cannot perform any actions.</div>
                         <button @onclick="CompleteAsync" class="btn" disabled>Complete Reservation</button>
                     }
                     else
                     {
                         <button @onclick="CompleteAsync" class="btn">Complete Reservation</button>
                     }
                 </div>
             </div>
         }
         <label>@ErrorMessage</label>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Banegårdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>



@code {
    private int AccountId;
    private string ErrorMessage = "";
    [Parameter] 
    public int id { get; set; }

    private ReadFoodSellerReservationDTO reservation { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        IEnumerable<ReadFoodSellerReservationDTO> temp = await ReservationService.ReadFoodSellerReservations(AccountId);
        reservation = temp.FirstOrDefault(r => r.ReservationNumber == id)!;
        
    }
    
    private async void CompleteAsync()
    {
        try
        {
            ErrorMessage = "";
            await ReservationService.CompleteAsync(id);
            Navmgr.NavigateTo("/ManageReservations");

        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }
    
}
