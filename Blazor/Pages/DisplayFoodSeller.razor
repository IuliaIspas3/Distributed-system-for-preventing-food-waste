@page "/DisplayFoodSeller/{id:int}"
@using System.Security.Claims
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IFoodSellerService FoodSellerService
@inject IRatingAndCommentService RatingAndCommentService
@attribute [Authorize]
<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Food Seller</a>
            <a>Display &#x2022 Food &#x2022 Seller</a>
        </div>
        <div class="content-central">
<AuthorizeView>
    @if (dto != null)
    {
        <div class="card seller-info" >
            <div class="form-group field">
                <h5><b>Name:</b> @dto.Name </h5>
            </div>
            <div class="form-group field">
                <h5><b>Email:</b> @dto.Email </h5>
            </div>
            <div class="form-group field">
                <h5><b>Address:</b> @dto.Address </h5>
            </div>
            <div class="form-group field">
                <h5><b>Phone number:</b> @dto.PhoneNumber </h5>
            </div>
            <div class="form-group field">
                <h5><b>Average rating:</b> @averageRating </h5>
            </div>
        </div>
    }
        </AuthorizeView>
            <AuthorizeView Policy="MustBeCustomer">
                <div class="rate-drop">
                    <RadzenDropDown @bind-Value=@value Data=@rates/>
                </div>
                <button @onclick="CreateRatingAsync" class="rate-but">Rate</button>
            </AuthorizeView>
    <AuthorizeView>
        <label><b>Comments:</b></label>
     </AuthorizeView> 
        <AuthorizeView Policy="MustBeCustomer">
            <textarea placeholder="Write a comment..." type="text" @bind="comment" class="comment-text"/>
            <button @onclick="CreateCommentAsync" class="comment-but">Comment</button>
        </AuthorizeView>
        <AuthorizeView>
            @if (comments == null)
            {
            }
            else if (!comments.Any())
            {
                <p>No comments to display.</p>
            }
            else
            {
                @foreach (var item in comments)
                {
                    <div class="card customer-comment">
                        <h5>@item.CustomerFirstName @item.CustomerLastName</h5>
                        <h6>@item.Date.ToStringWithOutHourAndMinutes()</h6>
                        <h6>@item.Content</h6>
                    </div>
                }

            }
    
        </AuthorizeView>
         </div>
                <div class="content-footer bottom-0">
                    <div class="footer-title">Too Fresh Too Waste</div>
                    <div class="footer-address">
                        <a>Banegårdsgade 2</a>
                        <a>8700 Horsens</a>
                        <a>+45 50 36 14 56</a>
                    </div>
                    <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
                </div>
            </div>
        </div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;
    private int accountId;
    [Parameter] public int id { get; set; }
    private ReadFoodSellerDTO dto;
    private string errorMessage = "";
    private List<ReadCommentDTO> comments;
    private string comment = "";
    private double averageRating;
    private int value = 5;
    IEnumerable<int> rates;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        accountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        dto = await FoodSellerService.GetAsync(id);
        comments = await RatingAndCommentService.ReadCommentsByFoodSellerIdAsync(id);
        averageRating = await RatingAndCommentService.ReadAverageRatingByFoodSellerIdAsync(id);
        rates = new[] { 1, 2, 3, 4, 5 };
    }

    private async Task CreateCommentAsync()
    {
        errorMessage = "";
        try
        {
            await RatingAndCommentService.CreateCommentAsync(new CommentBasicDTO(id, accountId, comment));
            comments = await RatingAndCommentService.ReadCommentsByFoodSellerIdAsync(id);
            comment = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }
    private async Task CreateRatingAsync()
    {
        errorMessage = "";
        try
        {
            await RatingAndCommentService.CreateRatingAsync(new RatingBasicDTO(id, accountId, value));
            averageRating = await RatingAndCommentService.ReadAverageRatingByFoodSellerIdAsync(id);
            value = 5;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }
    
}