@page "/DisplayFoodSeller/{id:int}"
@using System.Security.Claims
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IFoodSellerService FoodSellerService
@inject IRatingAndCommentService RatingAndCommentService
@attribute [Authorize]
<AuthorizeView>
    @if (dto != null)
    {
        <div class="card">
            <div class="form-group field">
                <label>Name: @dto.Name </label>
            </div>
            <div class="form-group field">
                <label>Email: @dto.Email </label>
            </div>
            <div class="form-group field">
                <label>Address: @dto.Address </label>
            </div>
            <div class="form-group field">
                <label>Phone number: @dto.PhoneNumber </label>
            </div>
            <div class="form-group field">
                <label>Average rating: @averageRating </label>
            </div>

        </div>
        @if (comments == null)
        {
        }
        else if (!comments.Any())
        {
            <p>No comments to display.</p>
        }
        else
        {
            @foreach (var item in comments)
            {
                <div class="card" style=" height: 200px; width: 100%">
                    <h3>@item.CustomerFirstName @item.CustomerLastName</h3>
                    <h6>@item.Date.ToStringWithOutHourAndMinutes()</h6>
                    <h6>@item.Content</h6>
                </div>
            }

        }
    }
</AuthorizeView>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;
    [Parameter] public int id { get; set; }
    private ReadFoodSellerDTO dto;
    private List<ReadCommentDTO> comments;
    private double averageRating;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        dto = await FoodSellerService.GetAsync(id);
        comments = await RatingAndCommentService.ReadCommentsByFoodSellerIdAsync(id);
        averageRating = await RatingAndCommentService.ReadAverageRatingByFoodSellerIdAsync(id);
    }   
}