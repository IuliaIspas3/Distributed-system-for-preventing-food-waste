@page "/DisplayFoodSeller/{id:int}"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IFoodSellerService FoodSellerService
@inject IRatingAndCommentService RatingAndCommentService
@attribute [Authorize]
<div class="main-content">
<div class="sidebar">
    <NavMenu/>
</div>
<div class="content">
<div class="content-header">
    <a>Food Seller</a>
    <a>Display &#x2022 Food &#x2022 Seller</a>
</div>
<div class="content-central">
    @if (foodSeller != null)
    {
        <div class="seller-info">
            <AuthorizeView>
                <img class="seller-image col-sm-12 col-lg-3" src="@($"data:image/png;base64,{base64}")" alt="Uploaded Image"/>
                <div class="inf-container  col-sm-12 col-lg-6">
                    <div class="form-group field">
                        <h4 style="font-weight: bold"> @foodSeller.Name </h4>
                    </div>
                    <div class="form-group field">
                        <h5><span class="oi oi-envelope-closed"/> @foodSeller.Email </h5>
                    </div>
                    <div class="form-group field">
                        <h5><span class="oi oi-map-marker"/> @foodSeller.Address </h5>
                    </div>
                    <div class="form-group field">
                        <h5><span class="oi oi-phone"/> @foodSeller.PhoneNumber </h5>
                    </div>
                    <div class="form-group field">
                        <h5><b>Average rating:</b> @averageRating </h5>
                    </div>
                </div>
            </AuthorizeView>
            <AuthorizeView Policy="MustBeCustomer">
                <div class="rating col-sm-12 col-lg-3">
                    <div class="rate-drop">
                        <RadzenDropDown @bind-Value=@value Data=@rates/>
                    </div>
                    <button @onclick="CreateRatingAsync" class="btn">Rate</button>
                </div>
            </AuthorizeView>
        </div>
    }
<AuthorizeView Policy="MustBeCustomer">
    <div id = "commentLine">
        <textarea placeholder="Write a comment..." type="text" @bind="comment" class="comment-text"/>
        <button @onclick="CreateCommentAsync" class="btn">Comment</button>
    </div>
</AuthorizeView>
<AuthorizeView>
    @if (comments == null)
{
}
else if (!comments.Any())
{
    <p>No comments to display.</p>
}
else
{
            
        @foreach (var item in comments)
        {
            <div class="comment-container col-6 col-lg-4">
                <div id = "customer-info">
                    <div class="comment-name">@item.Customer.FirstName @item.Customer.LastName</div>
                    <div style = "padding: 5px">@item.Date.ToStringWithOutHourAndMinutes()</div>  
                </div>
                <div style = "padding: 10px">@item.Content</div>
            </div>
    }
               

    }
    
</AuthorizeView>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Banegårdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;
    private int accountId;
    [Parameter] public int id { get; set; }
    private Domain.FoodSeller foodSeller;
    private string errorMessage = "";
    private List<Comment> comments;
    private string comment = "";
    private double averageRating;
    private int value = 5;
    IEnumerable<int> rates;
    private string base64 = "";


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        accountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        foodSeller = await FoodSellerService.GetAsync(id);
        comments = await RatingAndCommentService.ReadCommentsByFoodSellerIdAsync(id);
        averageRating = await RatingAndCommentService.ReadAverageRatingByFoodSellerIdAsync(id);
        rates = new[] { 1, 2, 3, 4, 5 };
        base64 = await FoodSellerService.GetPhotoAsync(id);
    }

    private async Task CreateCommentAsync()
    {
        errorMessage = "";
        try
        {
            await RatingAndCommentService.CreateCommentAsync(new CommentBasicDTO(id, accountId, comment));
            comments = await RatingAndCommentService.ReadCommentsByFoodSellerIdAsync(id);
            comment = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
            StateHasChanged();
        }
    }
    private async Task CreateRatingAsync()
    {
        errorMessage = "";
        try
        {
            await RatingAndCommentService.CreateRatingAsync(new RatingBasicDTO(id, accountId, value));
            averageRating = await RatingAndCommentService.ReadAverageRatingByFoodSellerIdAsync(id);
            value = 5;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
            StateHasChanged();
        }
    }
    
}