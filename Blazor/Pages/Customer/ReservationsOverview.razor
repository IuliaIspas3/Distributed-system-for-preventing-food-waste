@page "/ReservationsOverview"
@using System.Security.Claims
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavMgr
@inject IReservationService ReservationService
@attribute [Authorize]

<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Customer</a>
            <a>&#x2022 Your Reservations &#x2022</a>
        </div>
        <div class="content-central">
            <AuthorizeView Policy="MustBeCustomer">
                @if (_reservations == null)
                {
                }
                else
                {
                    <div class="subtitle"><h5>Uncompleted reservations:</h5></div>
                    <div class="reservation-container">
                        @if (!_reservations.Any())
                        {
                            <p>No reservations to display.</p>
                        }
                        else
                        {
                          @foreach (var item in _reservations)
                          {
                              <div class="product col-6 col-lg-4" @onclick="@(() => NavMgr.NavigateTo($"/CustomerDisplayFoodOffer/{item.FoodOfferId}"))">
                                  <img class="product-image" src="@($"data:image/png;base64,{@item.Photo}")" alt="Uploaded Image"/>
                                  <div class="product-title"><b>@item.Title</b></div>
                                  <div class="product-seller">@item.FoodSeller.Name</div>
                                  <div class="product-price">@item.Price DKK</div>
                              </div>
                          }  
                        }
                        
                    </div>
                    
                    <div class="subtitle"><h5>Completed reservations:</h5></div>
                    <div class="reservation-container">
                        @if (!_completedReservations.Any())
                        {
                            <p>No reservations to display.</p>
                        }
                        else
                        {
                           @foreach (var item in _completedReservations)
                           {
                               <div class="product col-6 col-lg-4" @onclick="@(() => NavMgr.NavigateTo($"/CustomerDisplayFoodOffer/{item.FoodOfferId}"))">
                                   <img class="product-image" id="productElements" src="@($"data:image/png;base64,{@item.Photo}")" alt="Uploaded Image"/>
                                   <div class="product-title" id="productElements"><b>@item.Title</b></div>
                                   <div class="product-seller" id="productElements">@item.FoodSeller.Name</div>
                                   <div class="product-price" id="productElements">@item.Price DKK</div>
                               </div>
                           }  
                        }
                       
                    </div>
            
                }
            
            </AuthorizeView>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Baneg√•rdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <label style="color: red">@ErrorMessage</label>
}

@code {
    private int AccountId;
    private IEnumerable<Reservation> _reservations;
    private IEnumerable<Reservation> _completedReservations;
    private string ErrorMessage = "";
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        IEnumerable<Reservation> temp = await ReservationService.ReadCustomerReservations(AccountId);
        _reservations = temp.Where(r => r.IsCompleted == false);
        _completedReservations = temp.Where(r => r.IsCompleted);
    }
    
}