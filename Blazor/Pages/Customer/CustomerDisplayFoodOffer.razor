@page "/CustomerDisplayFoodOffer/{id:int}"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager Navmgr
@inject IFoodOfferService foodOfferService
@inject IReservationService reservationService
@attribute [Authorize]

<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Customer</a>
            <a>Food &#x2022 Offer &#x2022 Details</a>
        </div>
        <div class="content-central">
            <AuthorizeView Policy="MustBeCustomer">
                @if (foodOffer is not null)
                {
                    <div class="food-offer">
                        <img class="product-image col-sm-12 col-lg-3" src="@($"data:image/png;base64,{foodOffer.Photo}")" alt="Uploaded Image"/>
                        <div class = "product-info col-sm-12 col-lg-8" >
                            <div class = "product-title">@foodOffer.Title</div>
                            @if (foodOffer.IsReserved)
                            {
                                <div style="font-weight: bold">Reservation number: @reservationNumber</div>
                            }
                            <div><span class="oi oi-map-marker"/>  @foodOffer.FoodSeller.Name, @foodOffer.FoodSeller.Address</div>
                            <div><span class="oi oi-clock"/>  @foodOffer.StartPickupTime.ToString() - @foodOffer.EndPickupTime.ToString()</div>
                            <div class = "product-price">@foodOffer.Price DKK</div>
                            <div style="font-weight: bold">What is in the package?</div>
                            <div >@foodOffer.Description</div>
                        </div>
                        @if (foodOffer.IsCompleted)
                        {
                            <label>This food offer is completed.</label>
                        }
                        else if (foodOffer.IsReserved)
                        {
                            <div class="button-row col-sm-12 col-lg-1" >
                                <button @onclick="ConfirmCancelAction" class="btn">Cancel reservation</button>
                            </div>
                        }
                        else
                        {
                            <div class="button-row col-sm-12 col-lg-1" >
                                <button @onclick="ReserveAsync" class="btn">Reserve</button>
                            </div>
                        }
                    </div>
                    <label>@ErrorMessage</label>
                }
            </AuthorizeView>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Baneg√•rdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>
<Modal ShowModal="_showConfirmationModal">
    <p>@_message</p>
    <button @onclick="@Proceed">OK</button>
</Modal>
<Modal ShowModal="_showCancelModal">
    <p>Are you sure you want to cancel your reservation?</p>
    <button @onclick="@ProceedCancel">Yes</button>
    <button @onclick="@CancelOrEndAction">No, cancel</button>
</Modal>
@code {
    private int AccountId;
    private string ErrorMessage = "";
    [Parameter] 
    public int id { get; set; }
    private FoodOffer foodOffer { get; set; }
    private int reservationNumber;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;
    private bool _showConfirmationModal;
    private bool _showCancelModal;
    private String _message = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        foodOffer = await foodOfferService.GetFoodOfferByIdAsync(id);
        if (foodOffer.IsReserved)
        {
            IEnumerable<Reservation> temp = await reservationService.ReadCustomerReservations(AccountId);
            reservationNumber = temp.FirstOrDefault(r => r.FoodOfferId == id).ReservationNumber;
        }
    }

    private async void CancelAsync()
    {
        try
        {
            _message = "You have successfully canceled the reservation!";
            StateHasChanged();
            _showConfirmationModal = true;
            await reservationService.DeleteAsync(reservationNumber);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }
    
    private async void ReserveAsync()
    {
        try
        {
            _message = "You have successfully reserved the food offer!";
            StateHasChanged();
            _showConfirmationModal = true;
            await reservationService.CreateAsync(new ReservationCreationDTO(AccountId, id));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }
    private void Proceed()
    {
        _showConfirmationModal = false;
        Navmgr.NavigateTo("/ReservationsOverview");
    }

    private void ProceedCancel()
    {
        _showCancelModal = false;
        CancelAsync();
    }
    private void CancelOrEndAction()
    {
        _showConfirmationModal = false;
        _showCancelModal = false;
        StateHasChanged();
    }
    private void ConfirmCancelAction()
    {
        _showCancelModal = true;
        StateHasChanged();
    }


}