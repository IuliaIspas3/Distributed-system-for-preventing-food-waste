@page "/FoodOffersOverview"
@using Domain.DTOs
@using System.Security.Claims
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavMgr
@inject IFoodOfferService FoodOfferService
@attribute [Authorize]
<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Customer</a>
            <a>Food &#x2022 Offers</a>
        </div>
        <AuthorizeView Policy="MustBeCustomer">
            <div class="search-bar">
                <input class="search-input" placeholder="Search..." type="text" @bind="searchParameter" @bind:event="oninput"/>
                <button class="search-button" @onclick="Search">Search</button>
            </div>
        </AuthorizeView>
        <div class="content-central">
            <AuthorizeView Policy="MustBeCustomer">
                @if (_foodOffers == null)
                {
                }
                else if (!_foodOffers.Any())
                {
                    <p>No food offers to display</p>
                }
                else
                {
                    @foreach (var item in _foodOffers)
                    {
                        <div class="product col-6 col-lg-4" @onclick="@(() => NavMgr.NavigateTo($"/CustomerDisplayFoodOffer/{item.Id}"))">
                            <div class="product-image"></div>
                            <div class="product-title"><b>@item.Title</b></div>
                            <div class="product-seller">@item.FoodSeller.Name</div>
                            <div class="product-price">@item.Price DKK</div>
                        </div>
                    }

                }
            </AuthorizeView>
        </div>
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Banegårdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <label style="color: red">@ErrorMessage</label>
}

@code {
    private int AccountId;
    private IEnumerable<FoodOffer> _foodOffers;
    private string searchParameter = "";
    private string ErrorMessage = "";
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        _foodOffers = await FoodOfferService.GetAvailableFoodOffersAsync();
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(searchParameter))
        {
            _foodOffers = _foodOffers.Where(f => f.Title.Contains(searchParameter) || f.FoodSeller.Name.Contains(searchParameter));
        }
    }
}