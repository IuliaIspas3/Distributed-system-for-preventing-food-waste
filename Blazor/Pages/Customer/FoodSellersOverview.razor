@page "/FoodSellersOverview"
@using Domain
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject NavigationManager NavMgr
@inject IFoodSellerService FoodSellerService
@attribute [Authorize]

<div class="main-content">
    <div class="sidebar">
        <NavMenu/>
    </div>
    <div class="content">
        <div class="content-header">
            <a>Customer</a>
            <a>Food &#x2022 Sellers &#x2022 Overview</a>
        </div>
        <div class="content-central">
            <AuthorizeView Policy="MustBeCustomer">
                @if (foodSellers == null)
                {
                }
                else if (!foodSellers.Any())
                {
                    <p>No food sellers to display</p>
                }
                else
                {
                    @foreach (var item in foodSellers)
                    {
                        <div class="sellers col-6 col-lg-4" @onclick="@(() => NavMgr.NavigateTo($"/DisplayFoodSeller/{item.AccountId}"))">
                            <img class="sellers-image" src="@($"data:image/png;base64,{@item.Photo}")" alt="Uploaded Image"/>
                            <div class="sellers-name"><b>@item.Name</b></div>
                            <div class="sellers-address">@item.Address</div>
                            <div class="sellers-phoneNo">@item.PhoneNumber</div>
                        </div>
                    }
                       
                }
            </AuthorizeView>
        </div>
        
        <div class="content-footer bottom-0">
            <div class="footer-title">Too Fresh Too Waste</div>
            <div class="footer-address">
                <a>Baneg√•rdsgade 2</a>
                <a>8700 Horsens</a>
                <a>+45 50 36 14 56</a>
            </div>
            <div class="footer-copyrights">&copy Too Fresh Too Waste. All rights reserved.</div>
        </div>
    </div>
</div>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <label style="color: red">@ErrorMessage</label>
}

@code {
    private int AccountId;
    private List<FoodSeller> foodSellers;
    private string ErrorMessage = "";
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        foodSellers = await FoodSellerService.GetAllAsync();
    }
}