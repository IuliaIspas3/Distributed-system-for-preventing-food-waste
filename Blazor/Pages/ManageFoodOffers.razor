@page "/ManageFoodOffers"
@using Domain
@using Domain.DTOs
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject IFoodOfferService FoodOfferService
@attribute [Authorize]
<h3>FoodOffersOverview</h3>
<AuthorizeView Policy="MustBeFoodSeller">
<div class="card">
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="Title" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Description:</label>
        <input type="text" @bind="Description" @bind:event="oninput"/></div>
    <div class="form-group field">
        <label>Price:</label>
        <input type="number" @bind="Price" @bind:event="oninput"/>
    </div>
    <div class="rz-p-12 rz-text-align-center">
        <RadzenDatePicker @bind-Value=@StartPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
        <RadzenDatePicker @bind-Value=@EndPickupTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
    </div>
    <div class="button-row">
        <button @onclick="CreateAsync" class="acceptbtn">Create Food Offer</button>
    </div>
</div>
</AuthorizeView>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <label style="color: red">@ErrorMessage</label>
}

@code {
    private int AccountId;
    private List<FoodOffer> _foodOffers;
    private string ErrorMessage = "";
    private string Title = "";
    private string Description = "";
    private double Price = 0;
    private DateTime StartPickupTime = DateTime.Now;
    private DateTime EndPickupTime = DateTime.Now;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private bool _isLoggedIn;
    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        if (!_isLoggedIn) return;
        userClaims = user.Claims.AsEnumerable();
        AccountId = Int32.Parse(userClaims.FirstOrDefault(c => c.Type.Equals("ID"))!.Value);
        _foodOffers = await FoodOfferService.GetFoodOffersByFoodSellerIdAsync(AccountId);
    }

    private async Task CreateAsync()
    {
        ErrorMessage = "";
        try
        {
            await FoodOfferService.CreateAsync(new FoodOfferCreationDTO(AccountId, Title, Description, Price, new Date(StartPickupTime.Year, StartPickupTime.Month, StartPickupTime.Day, StartPickupTime.Hour, StartPickupTime.Minute), new Date(EndPickupTime.Year, EndPickupTime.Month, EndPickupTime.Day, EndPickupTime.Hour, EndPickupTime.Minute)));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage = e.Message;
        }
    }
}